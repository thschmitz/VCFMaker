System.out.println("O que voce deseja fazer?: " + "\n1) Alterar primeiro nome \n2) Alterar nome do meio\n3) Alterar ultimo nome \n4) Alterar número de celular\n5) Alterar data de nascimento\n6) Alterar data de aniversario\n7) Alterar email\n8) Alterar endereco\n 9) Alterar cidade\n10)");



switch(opcaoUsuario) {
		case 1:
				System.out.println("Insira o novo primeiro nome: ");
				novoDado = entrada.next();
				contato.setPrimeiroNome(novoDado);
				break;
		
		case 2:
				System.out.println("Insira o novo nome do meio: ");
				novoDado = entrada.next();
				contato.setNomeMeio(novoDado);
				break;

		case 3:
				System.out.println("Insira o novo ultimo nome: ");
				novoDado = entrada.next();
				contato.setUltimoNome(novoDado);
				break;

		case 4:
				System.out.println("Insira o novo número de celular: ");
				novoNumero = entrada.nextInt();
				contato.setNumeroCelular(novoNumero);
				break;

		case 5:
				System.out.println("Insira o novo dia: ");
				dia = entrada.nextInt();
				System.out.println("Insira o novo mês: ");
				mes = entrada.nextInt();
				System.out.println("Insira o novo ano: ");
				ano = entrada.nextInt();
				c.set(dia, mes, ano);
				contato.setDataNascimento(c);
				break;

		case 6:
				System.out.println("Insira o novo dia: ");
				dia = entrada.nextInt();
				System.out.println("Insira o novo mês: ");
				mes = entrada.nextInt();
				System.out.println("Insira o novo ano: ");
				ano = entrada.nextInt();
				c.set(dia, mes, ano);
				contato.setDataAniversario(c);
				break;

		case 7:
				System.out.println("Insira o novo email: ");
				novoDado = entrada.next();
				contato.setEmail(novoDado);
				break;

		case 8:
				System.out.println("Insira o novo endereço: ");
				novoDado = entrada.next();
				contato.setEndereco(novoDado);
				break;

		case 9:
				System.out.println("Insira a nova cidade: ");
				novoDado = entrada.next();
				contato.setCidade(novoDado);
				break;

		case 10:
				System.out.println("Insira o novo estado: ");
				novoDado = entrada.next();
				contato.setEstado(novoDado);
				break;
		
		case 11:
				System.out.println("Insira o novo país: ");
				novoDado = entrada.next();
				contato.setPais(novoDado);
				break;

		case 12:
				System.out.println("Insira o novo CEP: ");
				novoNumero = entrada.nextInt();
				contato.setCep(novoNumero);
				break;

		default:
				cadastrarUsuarioContador = false;
}

public String getNomeMeio() {
        return this.nomeMeio;
    }

    public String getUltimoNome() {
        return this.ultimoNome;
    }

    public int getNumeroCelular(){
        return this.numeroCelular;
    }

    public String getNascimento(){
        return formataData.format(this.dataNascimento);
    }





    public static void cadastrarUsuarioMenu(Boolean cadastrarUsuarioContador, int opcaoUsuario, Scanner entrada, Contato contato){
        String [] campos = {"primeiro nome", "nome do meio", "ultimo nome", "numero de celular", "data de nascimento", "data de aniversario", "email", "endereco", "cidade", "estado", "pais", "cep"};

        while(cadastrarUsuarioContador){
            String novoDado;
            int dia, mes, ano, novoNumero;
            Calendar c = Calendar.getInstance();
            System.out.println("\nDeseja adicionar ou atualizar algum dado?");
            
            for(int i = 0; i<campos.length; i++){
                System.out.println("\n" + (i + 1) + ") Alterar " + campos[i]);
            }
            
            System.out.println("\n13) Voltar ao menu");
            System.out.print("\n-> ");
            opcaoUsuario = entrada.nextInt();

            
            switch(opcaoUsuario) {
                case 1:
                    System.out.println("Insira o novo primeiro nome: ");
                    novoDado = entrada.next();
                    contato.setPrimeiroNome(novoDado);
                    break;
                case 2:
                    System.out.println("Insira o novo nome do meio: ");
                    novoDado = entrada.next();
                    contato.setNomeMeio(novoDado);
                    break;

                case 3:
                    System.out.println("Insira o novo ultimo nome: ");
                    novoDado = entrada.next();
                    contato.setUltimoNome(novoDado);
                    break;

                case 4:
                    System.out.println("Insira o novo número de celular pessoal: ");
                    novoNumero = entrada.nextInt();
                    contato.setNumeroCelularPessoal(novoNumero);
                    break;
            
                case 5:
                    System.out.println("Insira o novo número de celular fixo: ");
                    novoNumero = entrada.nextInt();
                    contato.setNumeroCelularFixo(novoNumero);
                    break;
            
                case 6:
                    System.out.println("Insira o novo dia: ");
                    dia = entrada.nextInt();
                    System.out.println("Insira o novo mês: ");
                    mes = entrada.nextInt();
                    System.out.println("Insira o novo ano: ");
                    ano = entrada.nextInt();
                    c.set(dia, mes, ano);
                    contato.setDataNascimento(c);
                    break;

                case 7:
                    System.out.println("Insira o novo email: ");
                    novoDado = entrada.next();
                    contato.setEmail(novoDado);
                    break;

                case 8:
                    System.out.println("Insira o novo endereço: ");
                    novoDado = entrada.next();
                    contato.setEndereco(novoDado);
                    break;

                case 9:
                    System.out.println("Insira a nova cidade: ");
                    novoDado = entrada.next();
                    contato.setCidade(novoDado);
                    break;

                case 10:
                    System.out.println("Insira o novo estado: ");
                    novoDado = entrada.next();
                    contato.setEstado(novoDado);
                    break;
                
                case 11:
                    System.out.println("Insira o novo país: ");
                    novoDado = entrada.next();
                    contato.setPais(novoDado);
                    break;

                case 12:
                    System.out.println("Insira o novo CEP: ");
                    novoNumero = entrada.nextInt();
                    contato.setCep(novoNumero);
                    break;

                default:
                    cadastrarUsuarioContador = false;
            }
        }
    }


    String primeiroNome, String ultimoNome, String numeroCelularPessoal, String email, String numeroCelularFixo, String genero, String nomeMeio, 
    String diaNascimento, String mesNascimento, String anoNascimento, String tipoResidencia, String endereco, String cidade, String estado, String pais, String cep, 
    String emprego, String siteEmpresarial, String twitter, String linkedin, String instagram, String youtube, String sitePessoal

    public void setGeral(String[] valores){
        this.primeiroNome = valores[0].toString();
        this.ultimoNome = valores[1];
        this.numeroCelularPessoal = Long.parseLong(valores[2]);
        this.email = valores[3];
        this.numeroCelularFixo = Long.parseLong(numeroCelularFixo);
        this.genero = genero.charAt(0);
        this.nomeMeio = nomeMeio;
        int dia = Integer.parseInt(diaNascimento);
        int mes = Integer.parseInt(mesNascimento);
        int ano = Integer.parseInt(anoNascimento);
        Calendar c = Calendar.getInstance();
        c.set(dia, mes, ano);
        this.dataNascimento = c;
        this.tipoResidencia = tipoResidencia;
        this.endereco = endereco;
        this.cidade = cidade;
        this.estado = estado;
        this.pais = pais;
        this.cep = Long.parseLong(cep);
        this.emprego = emprego;
        this.siteEmpresarial = siteEmpresarial;
        this.twitter = twitter;
        this.linkedin = linkedin;
        this.instagram = instagram;
        this.youtube = youtube;
        this.sitePessoal = sitePessoal;

    }

    public void setGeral(String[] valores){
        this.primeiroNome = valores[0].toString();
        this.ultimoNome = valores[1];
        this.numeroCelularPessoal = Long.parseLong(valores[2]);
        this.email = valores[3];
        this.numeroCelularFixo = Long.parseLong(valores[4]);
        int dia = Integer.parseInt(valores[5]);
        int mes = Integer.parseInt(valores[6]);
        int ano = Integer.parseInt(valores[7]);
        Calendar c = Calendar.getInstance();
        c.set(dia, mes, ano);
        this.genero = valores[8].charAt(0);
        this.nomeMeio = valores[9];
        this.tipoResidencia = valores[10];
        this.endereco = valores[11];
        this.cidade = valores[12];
        this.estado = valores[13];
        this.pais = valores[14];
        this.cep = Long.parseLong(valores[15]);
        this.emprego = valores[16];
        this.siteEmpresarial = valores[17];
        this.twitter = valores[18];
        this.linkedin = valores[19];
        this.instagram = valores[20];
        this.youtube = valores[21];
        this.sitePessoal = valores[22];
    }




public void setGeral(String[] valores){
	this.primeiroNome = valores[0].toString();
	this.ultimoNome = valores[1];
	if(valores[2].equals("")){
			this.numeroCelularPessoal = 0;
	}else{
			this.numeroCelularPessoal = Long.parseLong(valores[2]);
	}
	this.email = valores[3];
	this.numeroCelularFixo = Long.parseLong(valores[4]);
	int dia, mes, ano;
	
	if(valores[5].equals("")){
			dia = 0;
	}else{
			dia = Integer.parseInt(valores[5]);
	}if(valores[6].equals("")){
			mes = 0;
	}else{
			mes = Integer.parseInt(valores[6]);
	}if(valores[7].equals("")){
			ano = 0;
	}else{
			ano = Integer.parseInt(valores[7]);
	}
	Calendar c = Calendar.getInstance();
	c.set(dia, mes, ano);
	this.dataNascimento = c;
	this.genero = valores[8].charAt(0);
	this.nomeMeio = valores[9];
	this.tipoResidencia = valores[10];
	this.endereco = valores[11];
	this.cidade = valores[12];
	this.estado = valores[13];
	this.pais = valores[14];
	if(valores[15].equals("")){
			this.cep = 0;
	}else{
			this.cep = Long.parseLong(valores[15]);
	}
	this.emprego = valores[16];
	this.siteEmpresarial = valores[17];
	this.twitter = valores[18];
	this.linkedin = valores[19];
	this.instagram = valores[20];
	this.youtube = valores[21];
	this.sitePessoal = valores[22];
}


import java.util.*;
import java.text.DateFormat;

public class Contato {

	DateFormat formataData = DateFormat.getDateInstance();

	private String primeiroNome;
	private String nomeMeio;
	private String ultimoNome;
	
	private String numeroCelularPessoal;
	private String numeroCelularFixo;
	private Calendar dataNascimento;
	private char genero;
	private String email;
	private String tipoResidencia;
	private String endereco;
	private String cidade;
	private String estado;
	private String pais;
	private String cep;
	private String emprego;
	private String siteEmpresarial;
	private String twitter;
	private String linkedin;
	private String instagram;
	private String youtube;
	private String sitePessoal;

	Contato() {
	}

	Contato(String primeiroNome, String ultimoNome, String numeroCelular, String email) {
		this.primeiroNome = primeiroNome;
		this.ultimoNome = ultimoNome;
		this.numeroCelularPessoal = numeroCelular;
		this.email = email;
	}

	public String getNome() {
		return this.primeiroNome + " " + this.nomeMeio + " " + this.ultimoNome;
	}

	public String getPrimeiroNome() {
		return this.primeiroNome;
	}

	public String getNomeMeio() {
		return this.nomeMeio;
	}

	public String getUltimoNome() {
		return this.ultimoNome;
	}

	public String getNumeroCelularPessoal() {
		return this.numeroCelularPessoal;
	}

	public String getNumeroCelularFixo() {
		return this.numeroCelularFixo;
	}

	public String getNascimento() {
		return formataData.format(this.dataNascimento);
	}

	public char getGenero() {
		return this.genero;
	}

	public String getEmail() {
		return this.email;
	}

	public String getTipoResidencia() {
		return this.tipoResidencia;
	}

	public String getEndereco() {
		return this.endereco;
	}

	public String getCidade() {
		return this.cidade;
	}

	public String getEstado() {
		return this.estado;
	}

	public String getPais() {
		return this.pais;
	}

	public String getCep() {
		return this.cep;
	}

	public String getEmprego() {
		return this.emprego;
	}

	public String getSiteEmpresarial() {
		return this.siteEmpresarial;
	}

	public String getTwitter() {
		return this.twitter;
	}

	public String getLinkedin() {
		return this.linkedin;
	}

	public String getInstagram() {
		return this.instagram;
	}

	public String getYoutube() {
		return this.youtube;
	}

	public String getSitePessoal() {
		return this.sitePessoal;
	}

	public void setPrimeiroNome(String primeiroNome) {
		this.primeiroNome = primeiroNome;
	}

	public void setNomeMeio(String nomeMeio) {
		this.nomeMeio = nomeMeio;
	}

	public void setUltimoNome(String ultimoNome) {
		this.ultimoNome = ultimoNome;
	}

	public void setNumeroCelularPessoal(String numeroCelularPessoal) {
		this.numeroCelularPessoal = numeroCelularPessoal;
	}

	public void setNumeroCelularFixo(String numeroCelularFixo) {
		this.numeroCelularFixo = numeroCelularFixo;
	}

	public void setDataNascimento(Calendar dataNascimento) {
		this.dataNascimento = dataNascimento;
	}

	public void setGenero(char genero) {
		this.genero = genero;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public void setTipoResidencia(String tipoResidencia) {
		if (tipoResidencia.equals("iglu")) {
			System.out.println("Pqp kkkkkkkkkkk");
		}
		this.tipoResidencia = tipoResidencia;
	}

	public void setEndereco(String endereco) {
		this.endereco = endereco;
	}

	public void setCidade(String cidade) {
		this.cidade = cidade;
	}

	public void setEstado(String estado) {
		if (estado.equals("casado") || estado.equals("solteiro")) {
			System.out.println("Tu é burro cara? kkkkkkkkk");
		} else {
			this.estado = estado;
		}
	}

	public void setPais(String pais) {
		this.pais = pais;
	}

	public void setCep(String cep) {
		this.cep = cep;
	}

	public void setEmprego(String emprego) {
		this.emprego = emprego;
	}

	public void setSiteEmpresarial(String siteEmpresarial) {
		this.siteEmpresarial = siteEmpresarial;
	}

	public void setTwitter(String twitter) {
		this.twitter = twitter;
	}

	public void setLinkedin(String linkedin) {
		this.linkedin = linkedin;
	}

	public void setInstagram(String instagram) {
		this.instagram = instagram;
	}

	public void setYoutube(String youtube) {
		this.youtube = youtube;
	}

	public void setSitePessoal(String sitePessoal) {
		this.sitePessoal = sitePessoal;
	}

	public void setGeral(String[] valores) {
    int dia, mes, ano;
		System.out.println(valores[0].toString());
		this.primeiroNome = valores[0].toString();
		this.ultimoNome = valores[1].toString();
		this.numeroCelularPessoal = valores[2].toString();
		this.email = valores[3].toString();
		this.numeroCelularFixo = valores[4].toString();
		System.out.println("Passou do numeroCelular");
    if(valores[5].equals("")){
      dia = 1;
    }else{
      dia = Integer.parseInt(valores[5]);
    }
    if(valores[6].equals("")){
      mes = 1;
    }else{
		  mes = Integer.parseInt(valores[6]);
    }
    if(valores[7].equals("")){
      ano = 1;
    }else{
		  ano = Integer.parseInt(valores[7]);
    }
		Calendar c = Calendar.getInstance();
		c.set(dia, mes, ano);
		System.out.println("Passou do calendario");
		this.dataNascimento = c;
		if(valores[8] != ""){
			this.genero = valores[8].charAt(0);	
		}
		System.out.println("Passou do genero");
		this.nomeMeio = valores[9].toString();
		this.tipoResidencia = valores[10].toString();
		this.endereco = valores[11].toString();
		this.cidade = valores[12].toString();
		this.estado = valores[13].toString();
		this.pais = valores[14].toString();
		this.cep = valores[15].toString();
		System.out.println("Passou do CEP");
		this.emprego = valores[16].toString();
		this.siteEmpresarial = valores[17].toString();
		this.twitter = valores[18].toString();
		this.linkedin = valores[19].toString();
		this.instagram = valores[20].toString();
		this.youtube = valores[21].toString();
		this.sitePessoal = valores[22].toString();
	}
}


 = { "primeiro nome", "ultimo nome", "numero de celular pessoal", "email", "numero de celular fixo",
				"dia de nascimento", "mes de nascimento", "ano de nascimento", "genero (m/f/o)", "nome do meio",
				"tipo de residencia", "endereco", "cidade", "estado", "pais", "cep", "emprego", "site empresarial", "twitter",
				"linkedin", "instagram", "youtube", "site pessoal" };


String[] valoresVcf = {prefixarInicioArquivo(), prefixarVersaoArquivo(), prefixarNomeCompleto(), prefixarNome(), prefixarGenero(), prefixarDataNascimento(), prefixarEmail(), prefixarCelularPessoal(), prefixarTelefoneFixo(), prefixarTipoResidencial(), prefixarTipoEndereco(), prefixarEmprego(), prefixarSiteEmpresarial(), prefixarTwitter(), prefixarLinkedin(), prefixarInstagram(), prefixarYoutube(), prefixarSitePessoal(), prefixarFinalArquivo()};

for(int i=0; i<valores.length; i++) {
			if(!camposContato[i].equals("")){
				System.out.println(i + ": " + valores[i]);
				System.out.println(i + " campos Contato: " + camposContato[i]);
				try{
					fileWriter.write(System.lineSeparator());
					fileWriter.write(valores[i]);		
				} catch(IOException e) {
					e.printStackTrace();
				}
			}
		}

public String[] getAll() {
		String[] info = {this.primeiroNome, this.nomeMeio, this.ultimoNome, this.numeroCelularPessoal, this.numeroCelularFixo, formataData.format(this.dataNascimento.getTime()), String.valueOf(this.genero), this.email, this.tipoResidencia, this.etiquetaComercial, this.enderecoComercial, this.endereco, this.cidade, this.estado, this.pais, this.cep, this.emprego, this.siteEmpresarial, this.twitter, this.linkedin, this.instagram, this.youtube, this.nomeSitePessoal, this.sitePessoal};
		return info;
	}

for(int i = 0; i < arrayContatos.size(); i++) {
			if(arrayContatos.get(i).getPrimeiroNome().toUpperCase()
		 	.equals(nomeDesejado.toUpperCase()) || 
			arrayContatos.get(i)
			.getNomeMeio().toUpperCase().equals(nomeDesejado.toUpperCase()) ||
			arrayContatos.get(i).getUltimoNome().toUpperCase()
			.equals(nomeDesejado.toUpperCase())) {
				System.out.println();
				colorir.imprimirVerde("- " + arrayContatos.get(i).getNome());
				contador ++;
			}
		}

Inicio
Gabirel
Gamer
51980517686
cachorrinho64@gmail.com
532532555
10
08
2005
m
Lwaahuisyc
casa
nao tenho
desempregado
rua pastor padre
scs
rs
br
749326483
candidato padre
bolsonaro.com
jair
messias
lula
luladopubg
desafiodev
desafio
Inicio
Thomas
Schmitz
996969102
thomas.henrique
-
19
09
2005
m
Henrique
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Inicio
Arthur
Lwaahuisyc
9696969
arthurBlaze@yahoo.com.br
-
19
05
2009
f
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Inicio
Felipe
Jackuhwqau
36416521512
felipee@gmail.com
87653226
22
06
2005
o
loiruiewysur
-
-
-
-
-
-
-
-
-
-
-
-
-
-
comunismoParaTodes
comonusmoparatodes.com.br.urss
Inicio
Enzo
Perioeurjws
578326
enzociuno21462@gmail.com
-
02
03
2006
o
bernarasid
casa
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Inicio
Thomas
Pinto
7345673285
thsyuigcyhusag@yahoo.com.bing
-
19
11
1342
o
-
apartamento
-
-
-
-
-
-
-
o mesmo do Samuel
-
-
-
-
-
-
-
Inicio


try {
			FileWriter fw = new FileWriter("Contatos.txt", true);
			BufferedWriter bw = new BufferedWriter(fw);

      bw.write("Inicio");
			bw.newLine();
      for (int i = 0; i < arrayContatos.size(); i++) {
  			for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
  				if (arrayContatos.get(i).getAll()[j].equals("")) {
  					bw.write("-");	
  				} else {
  					bw.write(arrayContatos.get(i).getAll()[j]);
  				}
  				bw.newLine();
  			}
  			bw.write("Inicio");
  
  			bw.close();
  			fw.close();
      }
		} catch (IOException e) {
			e.printStackTrace();
		}

import java.io.*;
import java.util.*;

public class BackupTXTs {
	ArrayList<Contato> arrayContatos = new ArrayList<Contato>();
	
	public void ler() throws Exception {
    int numeroContatos = this.arrayContatos.size();
    for(int i = numeroContatos - 1; i >= 0 ; i--) {
      System.out.println("O número de contatos é: " + this.arrayContatos.size());
      System.out.println(i);
			this.arrayContatos.remove(i);
		}
		
		try {
			int contador = 0;
			InputStream arquivo = new FileInputStream("Contatos.txt");
			Scanner entradaArquivo = new Scanner(arquivo);
			String listaValores[];

			listaValores = new String[26];
			entradaArquivo.nextLine();
			
			while (entradaArquivo.hasNextLine()) {
				String valorLido = entradaArquivo.next();
				if (valorLido.equals("Inicio")) {
					Contato contato = new Contato();
					contato.setAll(listaValores);
					this.arrayContatos.add(contato);
					listaValores = new String[26];
					contador = 0;
					if (entradaArquivo.hasNextLine()) {
						entradaArquivo.nextLine();
						valorLido = entradaArquivo.next();
					} else {
						break;
					}
				}
				listaValores[contador] = valorLido;
				entradaArquivo.nextLine();
				contador++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ArrayList<Contato> getArrayContatos() {
		return this.arrayContatos;
	}
}

titulo.tituloPrincipal("Edicao de Usuario");

		System.out.println("Digite o usuario a ser editado: ");
		nomeDesejado = entrada.nextLine();

		Contato contato = menuBusca.buscaNomeCompleto(nomeDesejado, arrayContatos, colorir);

		System.out.println();
		colorir.imprimirAmarelo("Digite '-' caso queira eliminar o valor do campo");
		colorir.imprimirAmarelo("Deixe em branco caso queira manter o valor do campo");
		if(contato != null){
			for (int i = 0; i < campos.length; i++) {
				System.out.println("\n" + (i + 1) + ") Editar " + campos[i] + "(" + contato.getAll()[i] + ")" + ": ");
				valorDigitado = entrada.nextLine();

				if(valorDigitado == "") {
					valores[i] = contato.getAll()[i];
				} else if(valorDigitado == "-") {
					valores[i] = "";
				} else {
					valores[i] = valorDigitado;
				}
			}

      for(int i = 0; i < arrayContatos.size(); i++) {
				if(arrayContatos.get(i).getNome().equals(nomeDesejado)){
          arrayContatos.remove(i);
				}
			}
			
			contato.setAll(valores);
			
      ArquivoCriacao arquivoCriacao = new ArquivoCriacao(contato); 
			
      deletarArquivo.deletarArquivo(nomeDesejado+".vcf");
      deletarArquivo.deletarArquivo("Contatos.txt");
			
      arrayContatos.add(contato);
      
			try {
				FileWriter fw = new FileWriter("Contatos.txt", true);
				BufferedWriter bw = new BufferedWriter(fw);
	
	      bw.write("Inicio");
				bw.newLine();
	      for (int i = 0; i < arrayContatos.size(); i++) {
	  			for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
	  				if (arrayContatos.get(i).getAll()[j].equals("")) {
	  					bw.write("-");	
	  				} else {
	  					bw.write(arrayContatos.get(i).getAll()[j]);
	  				}
	  				bw.newLine();
	  			}
	  			bw.write("Inicio");
          if(i != arrayContatos.size() - 1){
            bw.newLine();
          }
	      }
				bw.close();
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

    String nomeCliente = contato.getNome();
		Prefixos prefixos = new Prefixos(contato);

		try {
			File file = new File(nomeCliente + ".vcf");
			file.createNewFile();
			FileWriter fileWriter = new FileWriter(nomeCliente + ".vcf");
			prefixos = new Prefixos(contato);

			arquivoCriacao.valoresVcf(fileWriter, prefixos);

			fileWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
			
		leituraTXTs.ler();
			
		} else {
			colorir.imprimirVermelho("Nenhum usuario encontrado!");
		}



// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista, se não adiciona risco (-)

		
		
/*
		for(int i = 0; i < linhas.size(); i ++) {
			for(int p = 0; p < listaPrefixos.length; p++) {
				if(linhas.get(i).replace(";", "").contains(listaPrefixos[p].replace(";", ""))) {
          listaPrefixosUsados.add(listaPrefixos[p]);
          //COMO CARALHOS SEPARAMOS CADA INFORMAÇÃO?
          //Metodos separados? Tem casos como o da data que são complicados kk
          //Como definir a posição especifica? Precisamos ter tudo em ordem

          listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
				}
			}
		}

		for(int i = 0; i < listaPrefixosUsados.size(); i ++) {

			String currentLinha = linhas.get(i);
			String currentPrefixo = listaPrefixosUsados.get(i);
			
			currentLinha = linhas.get(i).replace(";", " ");
			currentPrefixo = listaPrefixosUsados.get(i).replace(";", " ");

			currentLinha = currentLinha.replace(currentPrefixo, "");
			System.out.println("Linhas: " + currentLinha);			
		}*/










import java.util.*;


public class Formatacoes{

	List<String> listaValores = new ArrayList<String>();

  List<String> listaFormatados = new ArrayList<String>();
	
	Formatacoes(List<String> lista) {
		this.listaValores = lista;
	}

	
	public void imprimirListaValores(){
		for(int i = 0; i < this.listaValores.size(); i++) {
			System.out.println(this.listaValores.get(i));	
		}
  }

  public void formatarNomeCompleto(){
    
  }

  public String formatarPrimeiroNome(String dado){
    return dado;
  }

  public String formatarGenero(String dado){
    return dado;
  }
  
  
  public String formatarAno(String dado){
    return String.valueOf(dado.charAt(0)) + String.valueOf(dado.charAt(1)) + String.valueOf(dado.charAt(2)) + String.valueOf(dado.charAt(3));
  }

  public String formatarMes(String dado){
    return String.valueOf(dado.charAt(4)) + String.valueOf(dado.charAt(5));
  }

  public String formatarDia(String dado){
    return String.valueOf(dado.charAt(6)) + String.valueOf(dado.charAt(7));
  }

  public String formatarEmail(String dado){
    return dado;
  }

  public String formatarTelefonePessoal(String dado){
    return dado;    
  }

  public String formatarTelefoneFixo(String dado){
    return dado;   
  }

  public String formatarTipoResidencia(String dado){
    return dado;  
  }

  public String formatarTipoEndereco(){  
    return "";  
  }

  public String formatarEtiquetaComercial(String dado){
    return dado;    
  }

  public String formatarEnderecoComercial(String dado){
    return dado;   
  }

  public String formatarEmprego(String dado){
    return dado;   
  }

  public String formatarSiteEmpresarial(String dado){
    return dado;  
  }

  public String formatarTwitter(String dado){
    return dado;    
  }

  public String formatarLinkedin(String dado){
    return dado;  
  }

  public String formatarInstagram(String dado){
    return dado;   
  }

  public String formatarYoutube(String dado){
    return dado;    
  }

  public String formatarSitePessoal(String dado){
    return "";
  }


	
	public String[] getAll() {
		String[] metodos = {formatarPrimeiroNome(listaValores.get(1)), formatarUltimoNome(listaValores.get(1)), formatarTelefonePessoal(listaValores.get(5)), formatarEmail(listaValores.get(4)), formatarTelefoneFixo(listaValores.get(6)), formatarDia(listaValores.get(3)), formatarMes(listaValores.get(3)),  formatarAno(listaValores.get(3)), formatarGenero(listaValores.get(2)), formatarNomeMeio(listaValores.get(1)), formatarTipoResidencia(listaValores.get(7)), formatarEtiquetaComercial(listaValores.get(9)), formatarEnderecoComercial(listaValores.get(10)), formatarEndereco(listaValores.get(8)), formatarCidade(listaValores.get(8)), formatarEstado(listaValores.get(8)), formatarPais(listaValores.get(8)), formatarCEP(listaValores.get(8)), formatarEmprego(listaValores.get(11)), formatarSiteEmpresarial(listaValores.get(12)), formatarTwitter(listaValores.get(13)), formatarLinkedin(listaValores.get(14)), formatarInstagram(listaValores.get(15)), formatarYoutube(listaValores.get(16)), formatarNomeSitePessoal(listaValores.get(17)), formatarEnderecoSitePessoal(listaValores.get(17))};
    System.out.println("O ANO AQUI OH: " + formatarAno(listaValores.get(3)));
		return metodos;
	}
}







import java.util.*;


public class Formatacoes{

	List<String> listaValores = new ArrayList<String>();

  List<String> listaFormatados = new ArrayList<String>();
	
	Formatacoes(List<String> lista) {
		this.listaValores = lista;
	}

	
	public void imprimirListaValores(){
		for(int i = 0; i < this.listaValores.size(); i++) {
			System.out.println(this.listaValores.get(i));	
		}
  }

  public void formatarPrimeiroNome(){
    String[] partes = listaValores.get(1).split("\\?");
    listaFormatados.add(partes[1]);
  }

  public void formatarNomeMeio(){
    String[] partes = listaValores.get(1).split("\\?");
    listaFormatados.add(partes[2]);
  }

  public void formatarUltimoNome(){
    String[] partes = listaValores.get(1).split("\\?");
    listaFormatados.add(partes[0]);
  }
  
  public void formatarGenero(){
    listaFormatados.add(listaValores.get(2));
  }
  
  
  public void formatarAno(){
    listaFormatados.add(String.valueOf(listaValores.get(3).charAt(0)) + String.valueOf(listaValores.get(3).charAt(1)) + String.valueOf(listaValores.get(3).charAt(2)) + String.valueOf(listaValores.get(3).charAt(3)));
  }

  public void formatarMes(){
    listaFormatados.add(String.valueOf(listaValores.get(3).charAt(4)) + String.valueOf(listaValores.get(3).charAt(5)));
  }

  public void formatarDia(){
    listaFormatados.add(String.valueOf(listaValores.get(3).charAt(6)) + String.valueOf(listaValores.get(3).charAt(7)));
  }

  public void formatarEmail(){
    listaFormatados.add(listaValores.get(4)) ;
  }

  public void formatarTelefonePessoal(){
    listaFormatados.add(listaValores.get(5)) ;    
  }

  public void formatarTelefoneFixo(){
    listaFormatados.add(listaValores.get(6)) ;   
  }

  public void formatarTipoResidencia(){
    listaFormatados.add(listaValores.get(7)) ;  
  }

  public void formatarEndereco(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[2]) ;  
  }

  public void formatarCidade(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[3]);
  }

  public void formatarEstado(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[4]);
  }

  public void formatarPais(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[6]);
  }

  public void formatarCEP(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[5]);
  }

  public void formatarEtiquetaComercial(){
    listaFormatados.add(listaValores.get(9)) ;    
  }

  public void formatarEnderecoComercial(){
    listaFormatados.add(listaValores.get(10)) ;   
  }

  public void formatarEmprego(){
    listaFormatados.add(listaValores.get(11)) ;   
  }

  public void formatarSiteEmpresarial(){
    listaFormatados.add(listaValores.get(12)) ;  
  }

  public void formatarTwitter(){
    listaFormatados.add(listaValores.get(13)) ;    
  }

  public void formatarLinkedin(){
    listaFormatados.add(listaValores.get(14)) ;  
  }

  public void formatarInstagram(){
    listaFormatados.add(listaValores.get(15)) ;   
  }

  public void formatarYoutube(){
    listaFormatados.add(listaValores.get(16)) ;    
  }

  public void formatarSitePessoal(){
    listaFormatados.add(listaValores.get(17)) ;
  }

  public List<String> getLista(){
    List<String> metodos = listaFormatados;

      return metodos;
  }

	public void setLista() {
		formatarPrimeiroNome(); 
    formatarUltimoNome(); 
    formatarTelefonePessoal();
    formatarEmail();
    formatarTelefoneFixo();
    formatarDia();
    formatarMes();
    formatarAno();
    formatarGenero();
    formatarNomeMeio();
    formatarTipoResidencia();
    formatarEtiquetaComercial();
    formatarEnderecoComercial(); 
    formatarEndereco();
    formatarCidade();
    formatarEstado();
    formatarPais();
    formatarCEP();
    formatarEmprego();
    formatarSiteEmpresarial();
    formatarTwitter();
    formatarLinkedin();
    formatarInstagram();
    formatarYoutube();
    /*
    formatarNomeSitePessoal();
    formatarEnderecoSitePessoal();
    */
	} 
}


String currentLinha = linhas.get(i);
			String currentPrefixo = listaPrefixosUsados.get(i);
			String valorFormatar = "";
      if(currentPrefixo.equals("-")){
        valoresAFormatar.add("-");
      }else{
			  currentLinha = linhas.get(i).replace(";", "?");
  			currentPrefixo = listaPrefixosUsados.get(i).replace(";", "?");
  			currentLinha = currentLinha.replace(currentPrefixo, "");
  
  			String site = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":" + valorSite;
  			String[] partes;
  			

				partes = currentLinha.split(":");

				if(partes.length > 1) {
					valorFormatar = partes[1];	
				} else {
					valorFormatar = partes[0];
				}
				System.out.println(valorFormatar);
				valoresAFormatar.add(valorFormatar);
  			
  			
  			System.out.println("Linhas: " + valorFormatar);
  		}

for(int i=0; i < valoresAFormatar.size(); i++){
			System.out.println(valoresAFormatar.get(i));
		}

		formatacoes = new Formatacoes(valoresAFormatar);

    formatacoes.setLista();
    
    for (int i = 0; i < formatacoes.getLista().size(); i++) {
		  System.out.println(formatacoes.getLista().get(i));
    }



			
	



public String[] setLista() {
    String[] listaMetodos = {this.formatarPrimeiroNome(), this.formatarUltimoNome(),  this.formatarTelefonePessoal(), this.formatarEmail(), this.formatarTelefoneFixo(), this.formatarDia(), this.formatarMes(), this.formatarAno(), this.formatarGenero(), this.formatarNomeMeio(), this.formatarTipoResidencia(), this.formatarEtiquetaComercial(), this.formatarEnderecoComercial(),  this.formatarEndereco(), this.formatarCidade(), this.formatarEstado(), this.formatarPais(), this.formatarCEP(), this.formatarEmprego(), this.formatarSiteEmpresarial(), this.formatarTwitter(), this.formatarLinkedin(), this.formatarInstagram(), this.formatarYoutube(), this.formatarNomeSitePessoal(), this.formatarEnderecoSitePessoal()};
    return listaMetodos;
	} 



import java.util.*;


public class Formatacoes{

	List<String> listaValores = new ArrayList<String>();

  List<String> listaFormatados = new ArrayList<String>();
	
	Formatacoes(List<String> lista) {
		this.listaValores = lista;
	}

	
	public void imprimirListaValores(){
		for(int i = 0; i < this.listaValores.size(); i++) {
			System.out.println(this.listaValores.get(i));	
		}
  }

  public void formatarPrimeiroNome(){
    String[] partes = listaValores.get(1).split("\\?");
    listaFormatados.add(partes[1]);
    
  }

  public void formatarNomeMeio(){
    String[] partes = listaValores.get(1).split("\\?");
    listaFormatados.add(partes[2]);
    
  }

  public void formatarUltimoNome(){
    String[] partes = listaValores.get(1).split("\\?");
    listaFormatados.add(partes[0]);
    
  }
  
  public void formatarGenero(){
    listaFormatados.add(listaValores.get(2));
    
  }
  
  public void formatarAno(){
    listaFormatados.add(String.valueOf(listaValores.get(3).charAt(0)) + String.valueOf(listaValores.get(3).charAt(1)) + String.valueOf(listaValores.get(3).charAt(2)) + String.valueOf(listaValores.get(3).charAt(3)));
    
  }

  public void formatarMes(){
    listaFormatados.add(String.valueOf(listaValores.get(3).charAt(4)) + String.valueOf(listaValores.get(3).charAt(5)));
    
  }

  public void formatarDia(){
    listaFormatados.add(String.valueOf(listaValores.get(3).charAt(6)) + String.valueOf(listaValores.get(3).charAt(7)));
    
  }

  public void formatarEmail(){
    listaFormatados.add(listaValores.get(4)) ;
    
  }

  public void formatarTelefonePessoal(){
    listaFormatados.add(listaValores.get(5)) ;   
    
  }

  public void formatarTelefoneFixo(){
    listaFormatados.add(listaValores.get(6)) ;   
    
  }

  public void formatarTipoResidencia(){
    listaFormatados.add(listaValores.get(7)) ;  
    
  }

  public void formatarEndereco(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[2]) ;  
    
  }

  public void formatarCidade(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[3]);
    
  }

  public void formatarEstado(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[4]);
    
  }

  public void formatarPais(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[6]);
    
  }

  public void formatarCEP(){
    String[] partes = listaValores.get(8).split("\\?");
    listaFormatados.add(partes[5]);
    
  }

  public void formatarEtiquetaComercial(){
    listaFormatados.add(listaValores.get(9)) ;    
    
  }

  public void formatarEnderecoComercial(){
    listaFormatados.add(listaValores.get(10)) ;  
    
  }

  public void formatarEmprego(){
    listaFormatados.add(listaValores.get(11)) ;
    
  }

  public void formatarSiteEmpresarial(){
    listaFormatados.add(listaValores.get(12)) ;  
    
  }

  public void formatarTwitter(){
    listaFormatados.add(listaValores.get(13)) ;   
    
  }

  public void formatarLinkedin(){
    listaFormatados.add(listaValores.get(14)) ;  
    
  }

  public void formatarInstagram(){
    listaFormatados.add(listaValores.get(15)) ;   
    
  }

  public void formatarYoutube(){
    listaFormatados.add(listaValores.get(16)) ;    
    
  }

  public void formatarNomeSitePessoal(){
    listaFormatados.add(listaValores.get(18));
    
  }
  
  public void formatarEnderecoSitePessoal(){
    listaFormatados.add(listaValores.get(17));
    
  }

  public List<String> getLista(){
    List<String> listaFormatadosFinal = listaFormatados;
      return listaFormatadosFinal;
  }

	public void setLista() {
		formatarPrimeiroNome(); 
    formatarUltimoNome(); 
    formatarTelefonePessoal();
    formatarEmail();
    formatarTelefoneFixo();
    formatarDia();
    formatarMes();
    formatarAno();
    formatarGenero();
    formatarNomeMeio();
    formatarTipoResidencia();
    formatarEtiquetaComercial();
    formatarEnderecoComercial(); 
    formatarEndereco();
    formatarCidade();
    formatarEstado();
    formatarPais();
    formatarCEP();
    formatarEmprego();
    formatarSiteEmpresarial();
    formatarTwitter();
    formatarLinkedin();
    formatarInstagram();
    formatarYoutube();
    formatarNomeSitePessoal();
    formatarEnderecoSitePessoal();
	}
}











AQUI 























for (int i = 0; i < linhas.size(); i++) {
			String currentLinha = linhas.get(i);

      int contador = 0;

			if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
				String[] separacaoLinhaValores = currentLinha.split(":");
				String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
				
				
				if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
					valorSite = separacaoLinhaValores[1];
					prefixoSite = separacaoLinhaType[1];
					casoEspecial = true;
				}
			}
			String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
			for (int p = 0; p < listaPrefixos.length; p++) {
				String currentPrefixo = listaPrefixos[p];
				
				if(casoEspecial) {
					if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
						listaPrefixosUsados.add(prefixoNovo);
						prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
	          contador++;	
					}
				} else {
					if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
						listaPrefixosUsados.add(listaPrefixos[p]);
	          contador++;
						listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
          }
				}
			}
		}

		for(int i = 0; i < listaPrefixosUsados.size(); i++) {
			System.out.println("Prefixos: " + listaPrefixosUsados.get(i));
		}

		for (int i = 0; i < listaPrefixosUsados.size(); i++) {

			System.out.println(listaPrefixosUsados.get(i));
			// SALVATORIOS
			
			System.out.println("Indice: " + i);

						String currentLinha = linhas.get(i);
			String currentPrefixo = listaPrefixosUsados.get(i);

			String valorFormatar = "";
			Boolean vazio = false;
			currentLinha = linhas.get(i).replace(";", "");

			currentLinha = linhas.get(i).replace(";", "?");
			currentPrefixo = listaPrefixosUsados.get(i).replace(";", "?");
			currentLinha = currentLinha.replace(currentPrefixo, "");

			String site = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":" + valorSite;
			String[] partes;
			String[] partesExcecao;
			

			partes = currentLinha.split(":");

			if(partes.length > 1) {
				valorFormatar = partes[1];	
			} else if(!vazio) {
				valorFormatar = partes[0];
			}


			valoresAFormatar.add(valorFormatar);	
			if(casoEspecial) {
				if(site.replace(";", "").contains(currentPrefixo.replace("?", ""))) {
					valoresAFormatar.add(prefixoSite);
				}
			}		
			
    }

		for(int i=0; i < valoresAFormatar.size(); i++){
			System.out.println("Final: " + valoresAFormatar.get(i));
		}

		formatacoes = new Formatacoes(valoresAFormatar);



for(int i = 0; i < listaPrefixos.length; i ++) {
			int naoTemIndice=0;
			String naoTem2 = "";
			for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				String currentPrefixo = listaPrefixos[i].replace(";", "");
				String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");

				if(casoEspecial) {					
					
					
					naoTemIndice = i;
					naoTem2 = currentPrefixo;
					
				}
				else if(!currentPrefixo.contains(currentPrefixoUsado)){
					if(!listaPrefixos[i].equals("uindsfuhjishnfujidsnfuidsnii")) {
						
						naoTemIndice = i;
						naoTem2 = listaPrefixos[i];
					}
					
				}
			}

			if(naoTemIndice!=0) {
				
				listaPrefixosUsados.add(naoTemIndice, "-");
				
				
			}
		}










!!!! BASE AQUI










		for(int i = 0; i < listaPrefixos.length; i ++) {
			int naoTemIndice=0;
			String naoTem2 = "";
			
			for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				String currentPrefixo = listaPrefixos[i].replace(";", "");
				String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");

				
				if(!currentPrefixo.contains(currentPrefixoUsado)){
					if(!listaPrefixos[i].equals("uindsfuhjishnfujidsnfuidsnii")) {
						
						naoTemIndice = i;
						naoTem2 = listaPrefixos[i];
					}
					
				}
			}

			if(naoTemIndice!=0) {
				System.out.println(naoTemIndice);	
				listaPrefixosUsados.add(naoTemIndice, "-");
			}
		}

		for(int l = 0; l < listaPrefixosUsados.size(); l++) {
			System.out.println(listaPrefixosUsados.get(l));
		}






import java.io.*;
import java.util.ArrayList;

public class ArquivoCriacao {
	Contato contato;
	Prefixos prefixos;
	CamposMenu menu = new CamposMenu();

	ArquivoCriacao(Contato contato) {
		this.contato = contato;
	}

	public void valoresVcf(FileWriter fileWriter, Prefixos prefixos) {
		String[] valores = prefixos.prefixarAll();
		String[] prefixosVazios = prefixos.getListaVazios();
		ArrayList<String> testePrefixosVazios = new ArrayList<String>();

		for (int i = 0; i < prefixosVazios.length; i++) {
			testePrefixosVazios.add(prefixosVazios[i]);
		}

		for (int i = 0; i < valores.length; i++) {
			if (!testePrefixosVazios.contains(valores[i])) {
				try {
          if(!valores[i].equals("-")){
						fileWriter.write(valores[i]);
						fileWriter.write(System.lineSeparator());
          }
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public void criar() {
		String nomeCliente = contato.getNome();
		criarArquivoTxt();
		Prefixos prefixos = new Prefixos(contato);

		try {
			File file = new File(nomeCliente + ".vcf");
			file.createNewFile();
			FileWriter fileWriter = new FileWriter(nomeCliente + ".vcf");
			prefixos = new Prefixos(contato);

			valoresVcf(fileWriter, prefixos);

			fileWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void criarArquivoTxt() {

		try {
			FileWriter fw = new FileWriter("Contatos.txt", true);
			BufferedWriter bw = new BufferedWriter(fw);

			bw.newLine();
			for (int i = 0; i < contato.getAll().length; i++) {
				if (contato.getAll()[i].equals("")) {
					bw.write("-");	
				} else {
					bw.write(contato.getAll()[i]);
				}
				bw.newLine();
			}
			bw.write("Inicio");

			bw.close();
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}











			/*for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				currentLinha = currentPrefixo.split(":")[0] + listaPrefixosUsados.get(l) + ":";
				System.out.println("Mas que merda: " + listaPrefixosUsados.get(l));
			}/*

			
      

      
			// System.out.println("currentLinha: " + currentLinha);
			
			/*
			String valorFormatar = "";
			Boolean vazio = false;
			currentLinha = linhas.get(i).replace(";", "");

			currentLinha = linhas.get(i).replace(";", "?");
			currentPrefixo = listaPrefixosUsados.get(i).replace(";", "?");
			currentLinha = currentLinha.replace(currentPrefixo, "");

			String site = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":" + valorSite;
			String[] partes;
			

			partes = currentLinha.split(":");
			
			if(partes.length > 1) {
				valorFormatar = partes[1];	
			} else if(!vazio) {
				valorFormatar = partes[0];
			}

			

			valoresAFormatar.add(valorFormatar);	
			System.out.println("RODOU AQUI HEIN");
			if(casoEspecial) {
				if(site.replace(";", "").contains(currentPrefixo.replace("?", ""))) {
					valoresAFormatar.add(prefixoSite);
				}
			}		*/


   
			// System.out.println("currentLinha: " + currentLinha);
			
			/*
			String valorFormatar = "";
			Boolean vazio = false;
			currentLinha = linhas.get(i).replace(";", "");

			currentLinha = linhas.get(i).replace(";", "?");
			currentPrefixo = listaPrefixosUsados.get(i).replace(";", "?");
			currentLinha = currentLinha.replace(currentPrefixo, "");

			String site = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":" + valorSite;
			String[] partes;
			

			partes = currentLinha.split(":");
			
			if(partes.length > 1) {
				valorFormatar = partes[1];	
			} else if(!vazio) {
				valorFormatar = partes[0];
			}

			

			valoresAFormatar.add(valorFormatar);	
			System.out.println("RODOU AQUI HEIN");
			if(casoEspecial) {
				if(site.replace(";", "").contains(currentPrefixo.replace("?", ""))) {
					valoresAFormatar.add(prefixoSite);
				}
			}		*/






 Formatacoes formatacoes = new Formatacoes(listaPrefixosUsados);
      
      formatacoes.setLista();

      List <String> dadosFormatados = formatacoes.getLista();

      for(int i = 0; i < dadosFormatados.size(); i++){
        System.out.println(dadosFormatados.get(i));
      }*/

		
    
/*
		for(int i=0; i < valoresAFormatar.size(); i++){
			System.out.println("Final: " + valoresAFormatar.get(i));
		}
		
		// 3 - pega o vetor e cria contato novo

    formatacoes = new Formatacoes(valoresAFormatar);

    formatacoes.setLista();

    List<String> listaFormatada = formatacoes.getLista();

    for(int i=0; i < listaFormatada.size(); i++){
      System.out.println("Dados finais: " + listaFormatada.get(i));
    }
    
    */















import java.util.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.util.List;

public class MenuImporta {
	Scanner entrada = new Scanner(System.in);
	TituloSecoes titulo = new TituloSecoes();
	Cores colorir = new Cores();

	public void importar(Cores colorir, ArrayList<Contato> arrayContatos) {
		String usuarioDigitado = "";
		Contato contato = new Contato();
		List<String> linhas = new ArrayList<>();
		Prefixos prefixos = new Prefixos();
		String[] listaPrefixos = prefixos.getListaVazios();
		ArrayList<String> listaPrefixosUsados = new ArrayList<String>();
		ArrayList<String> valoresAFormatar = new ArrayList<String>();
		
		String valorSite = "";
		Boolean casoEspecial = false;
		
		
		String prefixoSite = "uindsfuhjishnfujidsnfuidsnij";
		titulo.tituloPrincipal("Importacao Usuario");

		colorir.imprimirCiano("Digite o nome completo do usuario a ser importado: ");
		System.out.print("-> ");
		usuarioDigitado = entrada.nextLine();

		// FAZER VERIFICAÇÃO SE ESSE VCF JÁ EXISTE

		// 1 - ler o amigo

		try {
			linhas = Files.readAllLines(new File(usuarioDigitado + ".vcf").toPath());
			linhas.remove(0);
			linhas.remove(0);
			linhas.remove(linhas.size() - 1);
		} catch (Exception e) {
      colorir.imprimirVermelho("Arquivo não encontrado!");
		}

		// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista,
		// se não adiciona risco (-)


		for (int i = 0; i < linhas.size(); i++) {
			String currentLinha = linhas.get(i);
			
			if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
				String[] separacaoLinhaValores = currentLinha.split(":");
				String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
				
				if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
					valorSite = separacaoLinhaValores[1];
					prefixoSite = separacaoLinhaType[1];
					casoEspecial = true;
					// linhas.add(prefixoSite);
				}
			}
			
			String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
			
			for (int p = 0; p < listaPrefixos.length; p++) {
				String currentPrefixo = listaPrefixos[p];
				
				if(casoEspecial) {
					if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
						listaPrefixosUsados.add(prefixoNovo);
						prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
						System.out.println("Colocou palavra");
					}
				} else {
					if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
						listaPrefixosUsados.add(listaPrefixos[p]);
						listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
						System.out.println("Colocou palavra");
          }
				} 
      }
		}
		
		// PROBLEMA
		for(int i = 0; i < listaPrefixos.length; i ++) {
			int naoTemIndice=0;
			String naoTem2 = "";
			
			for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				String currentPrefixo = listaPrefixos[i].replace(";", "");
				String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");
				String prefixoSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";

				String prefixoCurrentSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";
				
				if(!currentPrefixo.contains(currentPrefixoUsado)){
					if(casoEspecial){
						if(!prefixoCurrentSiteNovo.replace(";", "").contains(prefixoSiteNovo.replace(";", ""))){
							naoTemIndice = i;	
							naoTem2 = listaPrefixos[i];	
						}
					} else {
						if(!listaPrefixos[i].equals("uindsfuhjishnfujidsnfuidsnii")) {
							naoTemIndice = i;
							naoTem2 = listaPrefixos[i];
						}
					}
				}
			}

			if(naoTemIndice!=0) {
				System.out.println(naoTemIndice);	
				listaPrefixosUsados.add(naoTemIndice, "-");
			}
		}

		System.out.println("------------------------");
/*		System.out.println(listaPrefixos.length);

		for(int i = 0; i < listaPrefixosUsados.size(); i++) {
			System.out.println(listaPrefixosUsados.get(i).split(":")[0].replace(";", ""));
		}
		
		System.out.println("------------------------");
		
		for(int i = 0; i < linhas.size(); i++) {
			System.out.println(linhas.get(i).split(":")[0].replace(";", ""));
		}
		System.out.println("------------------------");*/
		
		for (int i = 0; i < listaPrefixos.length; i++) {

			String currentPrefixo = listaPrefixosUsados.get(i).split(":")[0].replace(";", "");
			String currentLinha="";
			String currentValor="";

			if(currentPrefixo.equals("-")) {
				valoresAFormatar.add("-");
			} else {
				for(int j = 0; j < linhas.size(); j++){	
					currentLinha = linhas.get(j).split(":")[0].replace(";", "");
					currentValor = linhas.get(j).split(":")[1];

					

					if(currentLinha.equals(currentPrefixo)) {
	
						valoresAFormatar.add(currentValor);
						
					}
				}
			}
		}

		if(casoEspecial){
			valoresAFormatar.add(prefixoSite);
		} else {
			valoresAFormatar.add("-");
		}

    
		for(int j = 0; j < valoresAFormatar.size(); j ++) {
			System.out.println("ValoresFinais: " + valoresAFormatar.get(j));
		}
    
    /*
		
    Formatacoes formatacoes = new Formatacoes(valoresAFormatar);
    formatacoes.setLista();
    List<String> dadosFormatados = formatacoes.getLista();

    for(int k = 0; k < dadosFormatados.size(); k++) {
      System.out.println(dadosFormatados.get(k));
    }
    */
    
	}

	public void menu(ArrayList<Contato> arrayContatos, BackupTXTs leituraTXTs) {

		Cores colorir = new Cores();

		Boolean continuar = true;
		int opcaoUsuario;

		while (continuar) {

			System.out.println("\n1) Importar Contato \n2) Voltar ao menu principal");
			System.out.print("-> ");
			opcaoUsuario = Integer.parseInt(entrada.nextLine());

			switch (opcaoUsuario) {
				case 1:
					importar(colorir, arrayContatos);
					break;
				case 2:
					continuar = false;
					titulo.tituloVoltar();
					break;
			}
		}
	}
}
















import java.util.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.util.List;

public class MenuImporta {
	Scanner entrada = new Scanner(System.in);
	TituloSecoes titulo = new TituloSecoes();
	Cores colorir = new Cores();

	public void importar(Cores colorir, ArrayList<Contato> arrayContatos) {
		String usuarioDigitado = "";
		Contato contato = new Contato();
    DeletarArquivo deletarArquivo = new DeletarArquivo();
		List<String> linhas = new ArrayList<>();
		Prefixos prefixos = new Prefixos();
		String[] listaPrefixos = prefixos.getListaVazios();
		ArrayList<String> listaPrefixosUsados = new ArrayList<String>();
		ArrayList<String> valoresAFormatar = new ArrayList<String>();
		
		String valorSite = "";
		Boolean casoEspecial = false;
		
		
		String prefixoSite = "uindsfuhjishnfujidsnfuidsnij";
		titulo.tituloPrincipal("Importacao Usuario");

		colorir.imprimirCiano("Digite o nome completo do usuario a ser importado: ");
		System.out.print("-> ");
		usuarioDigitado = entrada.nextLine();

		// FAZER VERIFICAÇÃO SE ESSE VCF JÁ EXISTE

		// 1 - ler o amigo

		try {
			linhas = Files.readAllLines(new File(usuarioDigitado + ".vcf").toPath());
			linhas.remove(0);
			linhas.remove(0);
			linhas.remove(linhas.size() - 1);
		} catch (Exception e) {
      colorir.imprimirVermelho("Arquivo não encontrado!");
		}

		// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista,
		// se não adiciona risco (-)


		for (int i = 0; i < linhas.size(); i++) {
			String currentLinha = linhas.get(i);
			
			if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
				String[] separacaoLinhaValores = currentLinha.split(":");
				String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
				
				if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
					valorSite = separacaoLinhaValores[1];
					prefixoSite = separacaoLinhaType[1];
					casoEspecial = true;
					// linhas.add(prefixoSite);
				}
			}
			
			String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
			
			for (int p = 0; p < listaPrefixos.length; p++) {
				String currentPrefixo = listaPrefixos[p];
				
				if(casoEspecial) {
					if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
						listaPrefixosUsados.add(prefixoNovo);
						prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
						System.out.println("Colocou palavra");
					}
				} else {
					if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
						listaPrefixosUsados.add(listaPrefixos[p]);
						listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
						System.out.println("Colocou palavra");
          }
				} 
      }
		}
		
		// PROBLEMA
		for(int i = 0; i < listaPrefixos.length; i ++) {
			int naoTemIndice=0;
			String naoTem2 = "";
			
			for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				String currentPrefixo = listaPrefixos[i].replace(";", "");
				String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");
				String prefixoSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";

				String prefixoCurrentSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";
				
				if(!currentPrefixo.contains(currentPrefixoUsado)){
					if(casoEspecial){
						if(!prefixoCurrentSiteNovo.replace(";", "").contains(prefixoSiteNovo.replace(";", ""))){
							naoTemIndice = i;	
							naoTem2 = listaPrefixos[i];	
						}
					} else {
						if(!listaPrefixos[i].equals("uindsfuhjishnfujidsnfuidsnii")) {
							naoTemIndice = i;
							naoTem2 = listaPrefixos[i];
						}
					}
				}
			}

			if(naoTemIndice!=0) {
				System.out.println(naoTemIndice);	
				listaPrefixosUsados.add(naoTemIndice, "-");
			}
		}

		System.out.println("------------------------");
/*		System.out.println(listaPrefixos.length);

		for(int i = 0; i < listaPrefixosUsados.size(); i++) {
			System.out.println(listaPrefixosUsados.get(i).split(":")[0].replace(";", ""));
		}
		
		System.out.println("------------------------");
		
		for(int i = 0; i < linhas.size(); i++) {
			System.out.println(linhas.get(i).split(":")[0].replace(";", ""));
		}
		System.out.println("------------------------");*/
		
		for (int i = 0; i < listaPrefixos.length; i++) {

			String currentPrefixo = listaPrefixosUsados.get(i).split(":")[0].replace(";", "");
			String currentLinha="";
			String currentValor="";

			if(currentPrefixo.equals("-")) {
				valoresAFormatar.add("-");
			} else {
				for(int j = 0; j < linhas.size(); j++){	
					currentLinha = linhas.get(j).split(":")[0].replace(";", "");
					currentValor = linhas.get(j).split(":")[1];

					

					if(currentLinha.equals(currentPrefixo)) {
	
						valoresAFormatar.add(currentValor);
						
					}
				}
			}
		}

		if(casoEspecial){
			valoresAFormatar.add(prefixoSite);
		} else {
			valoresAFormatar.add("-");
		}

    
		for(int j = 0; j < valoresAFormatar.size(); j ++) {
			System.out.println("ValoresFinais: " + valoresAFormatar.get(j));
		}
    
    /*
		
    Formatacoes formatacoes = new Formatacoes(valoresAFormatar);
    formatacoes.setLista();
    String[] dadosFormatados = formatacoes.getLista();

    for(int k = 0; k < dadosFormatados.lenght; k++) {
      System.out.println(dadosFormatados[k]);
    }
    

    contato.setAll(dadosFormatados);
      			

            deletarArquivo.deletarArquivo("Contatos.txt");
      			
            arrayContatos.add(contato);
            
      			try {
      				FileWriter fw = new FileWriter("Contatos.txt", true);
      				BufferedWriter bw = new BufferedWriter(fw);
      	
      	      bw.write("Inicio");
      				bw.newLine();
      	      for (int i = 0; i < arrayContatos.size(); i++) {
      	  			for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
      	  				if (arrayContatos.get(i).getAll()[j].equals("")) {
      	  					bw.write("-");	
      	  				} else {
      	  					bw.write(arrayContatos.get(i).getAll()[j]);
      	  				}
      	  				bw.newLine();
      	  			}
      	  			bw.write("Inicio");
                if(i != arrayContatos.size() - 1){
                  bw.newLine();
                }
      	      }
      				bw.close();
      				fw.close();
      			} catch (IOException e) {
      				e.printStackTrace();
      			}
      
      
      			
      		leituraTXTs.ler();

    */
    
	}

	public void menu(ArrayList<Contato> arrayContatos, BackupTXTs leituraTXTs) {

		Cores colorir = new Cores();

		Boolean continuar = true;
		int opcaoUsuario;

		while (continuar) {

			System.out.println("\n1) Importar Contato \n2) Voltar ao menu principal");
			System.out.print("-> ");
			opcaoUsuario = Integer.parseInt(entrada.nextLine());

			switch (opcaoUsuario) {
				case 1:
					importar(colorir, arrayContatos);
					break;
				case 2:
					continuar = false;
					titulo.tituloVoltar();
					break;
			}
		}
	}
}






























import java.util.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.util.List;

public class MenuImporta {
	Scanner entrada = new Scanner(System.in);
	TituloSecoes titulo = new TituloSecoes();
	Cores colorir = new Cores();

	public void importar(Cores colorir, ArrayList<Contato> arrayContatos) {
		String usuarioDigitado = "";
		Contato contato = new Contato();
    DeletarArquivo deletarArquivo = new DeletarArquivo();
		List<String> linhas = new ArrayList<>();
		Prefixos prefixos = new Prefixos();
		String[] listaPrefixos = prefixos.getListaVazios();
		ArrayList<String> listaPrefixosUsados = new ArrayList<String>();
		ArrayList<String> valoresAFormatar = new ArrayList<String>();
		
		String valorSite = "";
		Boolean casoEspecial = false;
		
		
		String prefixoSite = "uindsfuhjishnfujidsnfuidsnij";
		titulo.tituloPrincipal("Importacao Usuario");

		colorir.imprimirCiano("Digite o nome completo do usuario a ser importado: ");
		System.out.print("-> ");
		usuarioDigitado = entrada.nextLine();

		// FAZER VERIFICAÇÃO SE ESSE VCF JÁ EXISTE

		// 1 - ler o amigo

		try {
			linhas = Files.readAllLines(new File(usuarioDigitado + ".vcf").toPath());
			linhas.remove(0);
			linhas.remove(0);
			linhas.remove(linhas.size() - 1);
		} catch (Exception e) {
      colorir.imprimirVermelho("Arquivo não encontrado!");
		}

		// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista,
		// se não adiciona risco (-)


		for (int i = 0; i < linhas.size(); i++) {
			String currentLinha = linhas.get(i);
			
			if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
				String[] separacaoLinhaValores = currentLinha.split(":");
				String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
				
				if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
					valorSite = separacaoLinhaValores[1];
					prefixoSite = separacaoLinhaType[1];
					casoEspecial = true;
					// linhas.add(prefixoSite);
				}
			}
			
			String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
			
			for (int p = 0; p < listaPrefixos.length; p++) {
				String currentPrefixo = listaPrefixos[p];
				
				if(casoEspecial) {
					if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
						listaPrefixosUsados.add(prefixoNovo);
						prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
						System.out.println("Colocou palavra");
					}
				} else {
					if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
						listaPrefixosUsados.add(listaPrefixos[p]);
						listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
						System.out.println("Colocou palavra");
          }
				} 
      }
		}
		
		// PROBLEMA
		for(int i = 0; i < listaPrefixos.length; i ++) {
			int naoTemIndice=0;
      String naoTem2;
			List<String> naoTemLista = new ArrayList<String>();
			
			for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				String currentPrefixo = listaPrefixos[i].replace(";", "");
				String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");
				String prefixoSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";

				String prefixoCurrentSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";
				
				if(!currentPrefixo.contains(currentPrefixoUsado)){
					if(casoEspecial){
						if(!prefixoCurrentSiteNovo.replace(";", "").contains(prefixoSiteNovo.replace(";", ""))){
							naoTemIndice = i;	
							naoTem2 = listaPrefixos[i];	
						}
					} else {
						if(!listaPrefixos[i].equals("uindsfuhjishnfujidsnfuidsnii")) {
							naoTemIndice = i;
							naoTem2 = listaPrefixos[i];
						}
					}
				}
			}

      //problema possivelmente AQUI
			if(naoTemIndice!=0) {
				System.out.println("NÃO TEM INDICE: " + naoTemIndice);					
				listaPrefixosUsados.add(naoTemIndice, "-"); 

			}		
    }
		

		// naoTem2 -> uma lista com todos os prefixos que nao tem coisa. Usar a lista ideal, com todos os prefixos vazios, e se o valor do indice i dela for igual ao valor do indice j da lista naoTem2, trocar por "-", se nao acessar o valor na lista linhas e coloca-los em outra lista junto aos "-";

		


		
		
		System.out.println("------------------------");
		System.out.println(listaPrefixos.length);

		for(int i = 0; i < listaPrefixosUsados.size(); i++) {
			System.out.println(listaPrefixosUsados.get(i).split(":")[0].replace(";", ""));
		}
		
		System.out.println("------------------------");
		
		for(int i = 0; i < linhas.size(); i++) {
			System.out.println(linhas.get(i).split(":")[0].replace(";", ""));
		}
		System.out.println("------------------------");
		
		for (int i = 0; i < listaPrefixos.length; i++) {

			String currentPrefixo = listaPrefixosUsados.get(i).split(":")[0].replace(";", "");
			String currentLinha="";
			String currentValor="";
      System.out.println("Prefixo usado " + i + " " + listaPrefixosUsados.get(i));
			if(currentPrefixo.equals("-")) {
				valoresAFormatar.add("-");
			} else {
				for(int j = 0; j < linhas.size(); j++){	
					currentLinha = linhas.get(j).split(":")[0].replace(";", "");
					currentValor = linhas.get(j).split(":")[1];

					

					if(currentLinha.equals(currentPrefixo)) {
	
						valoresAFormatar.add(currentValor);
						
					}
				}
			}
		}

		if(casoEspecial){
			valoresAFormatar.add(prefixoSite);
		} else {
			valoresAFormatar.add("-");
		}

    
		for(int j = 0; j < valoresAFormatar.size(); j ++) {
			System.out.println("ValoresFinais: " + valoresAFormatar.get(j));
		}
    
    
		
    Formatacoes formatacoes = new Formatacoes(valoresAFormatar);
    formatacoes.setLista();
    String[] dadosFormatados = formatacoes.getLista();

    for(int k = 0; k < dadosFormatados.length; k++) {
      System.out.println(dadosFormatados[k]);
    }
    
    /*
    contato.setAll(dadosFormatados);
      			

            deletarArquivo.deletarArquivo("Contatos.txt");
      			
            arrayContatos.add(contato);
            
      			try {
      				FileWriter fw = new FileWriter("Contatos.txt", true);
      				BufferedWriter bw = new BufferedWriter(fw);
      	
      	      bw.write("Inicio");
      				bw.newLine();
      	      for (int i = 0; i < arrayContatos.size(); i++) {
      	  			for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
      	  				if (arrayContatos.get(i).getAll()[j].equals("")) {
      	  					bw.write("-");	
      	  				} else {
      	  					bw.write(arrayContatos.get(i).getAll()[j]);
      	  				}
      	  				bw.newLine();
      	  			}
      	  			bw.write("Inicio");
                if(i != arrayContatos.size() - 1){
                  bw.newLine();
                }
      	      }
      				bw.close();
      				fw.close();
      			} catch (IOException e) {
      				e.printStackTrace();
      			}
      
      
      			
      		leituraTXTs.ler();

    */
    
	}

	public void menu(ArrayList<Contato> arrayContatos, BackupTXTs leituraTXTs) {

		Cores colorir = new Cores();

		Boolean continuar = true;
		int opcaoUsuario;

		while (continuar) {

			System.out.println("\n1) Importar Contato \n2) Voltar ao menu principal");
			System.out.print("-> ");
			opcaoUsuario = Integer.parseInt(entrada.nextLine());

			switch (opcaoUsuario) {
				case 1:
					importar(colorir, arrayContatos);
					break;
				case 2:
					continuar = false;
					titulo.tituloVoltar();
					break;
			}
		}
	}
}















import java.util.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.util.List;

public class MenuImporta {
	Scanner entrada = new Scanner(System.in);
	TituloSecoes titulo = new TituloSecoes();
	Cores colorir = new Cores();

	public void importar(Cores colorir, ArrayList<Contato> arrayContatos) {
		String usuarioDigitado = "";
		Contato contato = new Contato();
    DeletarArquivo deletarArquivo = new DeletarArquivo();
		List<String> linhas = new ArrayList<>();
		Prefixos prefixos = new Prefixos();
		String[] listaPrefixos = prefixos.getListaVazios();
		ArrayList<String> listaPrefixosUsados = new ArrayList<String>();
		ArrayList<String> valoresAFormatar = new ArrayList<String>();
		
		String valorSite = "";
		Boolean casoEspecial = false;
		
		
		String prefixoSite = "uindsfuhjishnfujidsnfuidsnij";
		titulo.tituloPrincipal("Importacao Usuario");

		colorir.imprimirCiano("Digite o nome completo do usuario a ser importado: ");
		System.out.print("-> ");
		usuarioDigitado = entrada.nextLine();

		// FAZER VERIFICAÇÃO SE ESSE VCF JÁ EXISTE

		// 1 - ler o amigo

		try {
			linhas = Files.readAllLines(new File(usuarioDigitado + ".vcf").toPath());
			linhas.remove(0);
			linhas.remove(0);
			linhas.remove(linhas.size() - 1);
		} catch (Exception e) {
      colorir.imprimirVermelho("Arquivo não encontrado!");
		}

		// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista,
		// se não adiciona risco (-)


		for (int i = 0; i < linhas.size(); i++) {
			String currentLinha = linhas.get(i);
			
			if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
				String[] separacaoLinhaValores = {currentLinha.substring(0, currentLinha.indexOf(":") - 1), currentLinha.substring(currentLinha.indexOf(":") + 1) };
				for(int k = 0; k < separacaoLinhaValores.length; k++) {
					System.out.println(separacaoLinhaValores[k]);
				}
				String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
				
				if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
					valorSite = separacaoLinhaValores[1];
					prefixoSite = separacaoLinhaType[1];
					casoEspecial = true;
					// linhas.add(prefixoSite);
				}
			}
			
			String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
			
			for (int p = 0; p < listaPrefixos.length; p++) {
				String currentPrefixo = listaPrefixos[p];
				
				if(casoEspecial) {
					if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
						listaPrefixosUsados.add(prefixoNovo);
						prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
						System.out.println("Colocou palavra");
					}
				} else {
					if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
						listaPrefixosUsados.add(listaPrefixos[p]);
						listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
						System.out.println("Colocou palavra");
          }
				} 
      }
		}
		
		// PROBLEMA
		for(int i = 0; i < listaPrefixos.length; i ++) {
			int naoTemIndice=0;
      String naoTem2;
			List<String> naoTemLista = new ArrayList<String>();
			
			for(int l = 0; l < listaPrefixosUsados.size(); l++) {
				String currentPrefixo = listaPrefixos[i].replace(";", "");
				String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");
				String prefixoSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";

				String prefixoCurrentSiteNovo = listaPrefixos[i].split(":")[0] + prefixoSite + ":";
				
				if(!currentPrefixo.contains(currentPrefixoUsado)){
					if(casoEspecial){
						if(!prefixoCurrentSiteNovo.replace(";", "").contains(prefixoSiteNovo.replace(";", ""))){
							naoTemIndice = i;	
							naoTem2 = listaPrefixos[i];	
						}
					} else {
						if(!listaPrefixos[i].equals("uindsfuhjishnfujidsnfuidsnii")) {
							naoTemIndice = i;
							naoTem2 = listaPrefixos[i];
						}
					}
				}
			}

      //problema possivelmente AQUI
			if(naoTemIndice!=0) {
				System.out.println("NÃO TEM INDICE: " + naoTemIndice);					
				listaPrefixosUsados.add(naoTemIndice, "-"); 

			}		
    }
		

		// naoTem2 -> uma lista com todos os prefixos que nao tem coisa. Usar a lista ideal, com todos os prefixos vazios, e se o valor do indice i dela for igual ao valor do indice j da lista naoTem2, trocar por "-", se nao acessar o valor na lista linhas e coloca-los em outra lista junto aos "-";

		


		
		
		System.out.println("------------------------");
		System.out.println(listaPrefixos.length);

		for(int i = 0; i < listaPrefixosUsados.size(); i++) {
			System.out.println(listaPrefixosUsados.get(i).split(":")[0].replace(";", ""));
		}
		
		System.out.println("------------------------");
		
		for(int i = 0; i < linhas.size(); i++) {
			System.out.println(linhas.get(i).split(":")[0].replace(";", ""));
		}
		System.out.println("------------------------");
		
		for (int i = 0; i < listaPrefixos.length; i++) {

			String currentPrefixo = listaPrefixosUsados.get(i).split(":")[0].replace(";", "");
			String currentLinha="";
			String currentValor="";
      System.out.println("Prefixo usado " + i + " " + listaPrefixosUsados.get(i));
			if(currentPrefixo.equals("-")) {
				valoresAFormatar.add("-");
			} else {
				for(int j = 0; j < linhas.size(); j++){	
					currentLinha = linhas.get(j).split(":")[0].replace(";", "");
					currentValor = linhas.get(j).split(":")[1];

					

					if(currentLinha.equals(currentPrefixo)) {
	
						valoresAFormatar.add(currentValor);
						
					}
				}
			}
		}

		if(casoEspecial){
			valoresAFormatar.add(prefixoSite);
		} else {
			valoresAFormatar.add("-");
		}

    
		for(int j = 0; j < valoresAFormatar.size(); j ++) {
			System.out.println("ValoresFinais: " + valoresAFormatar.get(j));
		}
    
    
		
    Formatacoes formatacoes = new Formatacoes(valoresAFormatar);
    formatacoes.setLista();
    String[] dadosFormatados = formatacoes.getLista();

    for(int k = 0; k < dadosFormatados.length; k++) {
      System.out.println(dadosFormatados[k]);
    }
    
    /*
    contato.setAll(dadosFormatados);
      			

            deletarArquivo.deletarArquivo("Contatos.txt");
      			
            arrayContatos.add(contato);
            
      			try {
      				FileWriter fw = new FileWriter("Contatos.txt", true);
      				BufferedWriter bw = new BufferedWriter(fw);
      	
      	      bw.write("Inicio");
      				bw.newLine();
      	      for (int i = 0; i < arrayContatos.size(); i++) {
      	  			for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
      	  				if (arrayContatos.get(i).getAll()[j].equals("")) {
      	  					bw.write("-");	
      	  				} else {
      	  					bw.write(arrayContatos.get(i).getAll()[j]);
      	  				}
      	  				bw.newLine();
      	  			}
      	  			bw.write("Inicio");
                if(i != arrayContatos.size() - 1){
                  bw.newLine();
                }
      	      }
      				bw.close();
      				fw.close();
      			} catch (IOException e) {
      				e.printStackTrace();
      			}
      
      
      			
      		leituraTXTs.ler();

    */
    
	}

	public void menu(ArrayList<Contato> arrayContatos, BackupTXTs leituraTXTs) {

		Cores colorir = new Cores();

		Boolean continuar = true;
		int opcaoUsuario;

		while (continuar) {

			System.out.println("\n1) Importar Contato \n2) Voltar ao menu principal");
			System.out.print("-> ");
			opcaoUsuario = Integer.parseInt(entrada.nextLine());

			switch (opcaoUsuario) {
				case 1:
					importar(colorir, arrayContatos);
					break;
				case 2:
					continuar = false;
					titulo.tituloVoltar();
					break;
			}
		}
	}
}








import java.io.*;
import java.util.*;

public class BackupTXTs {
	ArrayList<Contato> arrayContatos = new ArrayList<Contato>();
	
	public void ler() throws Exception {
		CamposMenu campos = new CamposMenu();
    int numeroContatos = this.arrayContatos.size();
    for(int i = numeroContatos - 1; i >= 0 ; i--) {
			this.arrayContatos.remove(i);
		}
		
		try {
			int contador = 0;
			InputStream arquivo = new FileInputStream("Contatos.txt");
			Scanner entradaArquivo = new Scanner(arquivo);
			String listaValores[];
			int qtdCampos = campos.getCampos().length;

			// DINAMIZAR ISSO AQUI
			listaValores = new String[qtdCampos];
			entradaArquivo.nextLine();
			
			while (entradaArquivo.hasNextLine()) {
				String valorLido = entradaArquivo.next();
				if (valorLido.equals("Inicio")) {
					Contato contato = new Contato();
					contato.setAll(listaValores);
					this.arrayContatos.add(contato);
					// DINAMIZAR ISSO AQUI
					listaValores = new String[qtdCampos];
					contador = 0;
					if (entradaArquivo.hasNextLine()) {
						entradaArquivo.nextLine();
						valorLido = entradaArquivo.next();
						System.out.println(valorLido);
					} else {
						break;
					}
				}

				if(valorLido.equals("-")) {
					valorLido = "";
				}
				
				listaValores[contador] = valorLido;
				entradaArquivo.nextLine();
				contador++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ArrayList<Contato> getArrayContatos() {
		return this.arrayContatos;
	}
}










import java.util.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.util.List;

public class MenuImporta {
	Scanner entrada = new Scanner(System.in);
	TituloSecoes titulo = new TituloSecoes();
	Cores colorir = new Cores();

	public void importar(Cores colorir, ArrayList<Contato> arrayContatos) {
		String usuarioDigitado = "";
		Contato contato = new Contato();
    DeletarArquivo deletarArquivo = new DeletarArquivo();
		List<String> linhas = new ArrayList<>();
		Prefixos prefixos = new Prefixos();
		String[] listaPrefixos = prefixos.getListaVazios();
    BackupTXTs leituraTXTs = new BackupTXTs();
		ArrayList<String> listaPrefixosUsados = new ArrayList<String>();
		ArrayList<String> valoresAFormatar = new ArrayList<String>();
		MenuBusca busca = new MenuBusca();
		
		String valorSite = "";
		Boolean casoEspecial = false;
		
		
		String prefixoSite = "uindsfuhjishnfujidsnfuidsnij";
		titulo.tituloPrincipal("Importacao Usuario");

		colorir.imprimirCiano("Digite o nome completo do usuario a ser importado: ");
		System.out.print("-> ");
		usuarioDigitado = entrada.nextLine();

		// FAZER VERIFICAÇÃO SE ESSE VCF JÁ EXISTE

		if(busca.buscaNomeCompleto(usuarioDigitado, arrayContatos, colorir)!=null){
			colorir.imprimirVermelho("Usuario ja esta cadastrado no sistema!");
		} else {
			// 1 - ler o amigo

			try {
				linhas = Files.readAllLines(new File(usuarioDigitado + ".vcf").toPath());
				linhas.remove(0);
				linhas.remove(0);
				linhas.remove(linhas.size() - 1);
			} catch (Exception e) {
	      colorir.imprimirVermelho("Arquivo não encontrado!");
			}
	
			// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista,
			// se não adiciona risco (-)
	
	
			for (int i = 0; i < linhas.size(); i++) {
				String currentLinha = linhas.get(i);
				
				if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
					String[] separacaoLinhaValores = {currentLinha.substring(0, currentLinha.indexOf(":")), currentLinha.substring(currentLinha.indexOf(":") + 1) };
					for(int k = 0; k < separacaoLinhaValores.length; k++) {
						System.out.println(separacaoLinhaValores[k]);
					}
					String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
					
					if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
						valorSite = separacaoLinhaValores[1];
						prefixoSite = separacaoLinhaType[1];
						casoEspecial = true;
						// linhas.add(prefixoSite);
					}
				}
				
				String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
				
				for (int p = 0; p < listaPrefixos.length; p++) {
					String currentPrefixo = listaPrefixos[p];
					
					if(casoEspecial) {
						if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
							listaPrefixosUsados.add(prefixoNovo);
							prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
							System.out.println("Colocou palavra");
						}
					} else {
						if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
							listaPrefixosUsados.add(listaPrefixos[p]);
							listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
							System.out.println("Colocou palavra");
	          }
					} 
	      }
			}
	
			String[] novaListaPrefixosVazios = {"FN;CHARSET=UTF-8:", "N;CHARSET=UTF-8:;;;;", "GENDER:", "BDAY:", "EMAIL;CHARSET=UTF-8;type=HOME,INTERNET:", "TEL;TYPE=CELL:", "TEL;TYPE=HOME,VOICE:", "LABEL;CHARSET=UTF-8;TYPE=HOME:", "ADR;CHARSET=UTF-8;TYPE=WORK:;;", "ADR;CHARSET=UTF-8;TYPE=HOME:;;;;;;", "ORG;CHARSET=UTF-8:", "ROLE;CHARSET=UTF-8:", "URL;type=WORK;CHARSET=UTF-8:", "X-SOCIALPROFILE;TYPE=twitter:", "X-SOCIALPROFILE;TYPE=linkedin:", "X-SOCIALPROFILE;TYPE=instagram:", "X-SOCIALPROFILE;TYPE=youtube:", "X-SOCIALPROFILE;TYPE="+":" };
	
			
			// PROBLEMA
			for(int i = 0; i < novaListaPrefixosVazios.length; i ++) {
				int TemIndice=0;
				String naoTem2 = "";
				
				
				for(int l = 0; l < listaPrefixosUsados.size(); l++) {
					String currentPrefixo = novaListaPrefixosVazios[i].replace(";", "");
					String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");
					String prefixoSiteNovo = novaListaPrefixosVazios[i].split(":")[0] + prefixoSite + ":";
					
					if(casoEspecial && prefixoSiteNovo.equals("X-SOCIALPROFILE;TYPE="+prefixoSite+":")){
						currentPrefixo = currentPrefixo.replace(":", prefixoSite) + ":";
					}
	
					if(currentPrefixoUsado.equals(currentPrefixo)) {
						System.out.println("teste: " + currentPrefixoUsado);
						TemIndice = i;
					}
					
				}
	
				if(TemIndice==i) {
					System.out.println(TemIndice);	
					
				} else {
					System.out.println("Nao tem: " + i);	
					listaPrefixosUsados.add(i, "-");
				}
			}
	
			System.out.println("------------------------");
			
			for (int i = 0; i < listaPrefixos.length; i++) {
	
				String currentPrefixo = listaPrefixosUsados.get(i).split(":")[0].replace(";", "");
				String currentLinha="";
				String currentValor="";
	
				if(currentPrefixo.equals("-")) {
					valoresAFormatar.add("-");
				} else {
					for(int j = 0; j < linhas.size(); j++){	
						currentLinha = linhas.get(j).split(":")[0].replace(";", "");
						currentValor = linhas.get(j).split(":")[1];
	
						
	
						if(currentLinha.equals(currentPrefixo)) {
		
							valoresAFormatar.add(currentValor);
							
						}
					}
				}
			}
	
			if(casoEspecial){
				valoresAFormatar.add(prefixoSite);
			} else {
				valoresAFormatar.add("-");
			}
	    
			for(int j = 0; j < valoresAFormatar.size(); j ++) {
				System.out.println("ValoresFinais: " + valoresAFormatar.get(j));
			}
			
	    Formatacoes formatacoes = new Formatacoes(valoresAFormatar);
	    formatacoes.setLista();
	    String[] dadosFormatados = formatacoes.getLista();
	
			formatacoes.imprimirListaValores();
		
	    for(int i = 0; i < dadosFormatados.length; i ++) {
				if(dadosFormatados[i].equals("-")) {
					dadosFormatados[i] = "";
				}
			}
	
	
			contato.setAll(dadosFormatados);

      deletarArquivo.deletarArquivo("Contatos.txt");
      			
            arrayContatos.add(contato);







      			try {
      				FileWriter fw = new FileWriter("Contatos.txt", true);
      				BufferedWriter bw = new BufferedWriter(fw);
      	
      	      bw.write("Inicio");
      				bw.newLine();
      	      for (int i = 0; i < arrayContatos.size(); i++) {
      	  			for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
      	  				if (arrayContatos.get(i).getAll()[j].equals("")) {
      	  					bw.write("-");	
      	  				} else {
      	  					bw.write(arrayContatos.get(i).getAll()[j]);
      	  				}
      	  				bw.newLine();
      	  			}
      	  			bw.write("Inicio");
                if(i != arrayContatos.size() - 1){
                  bw.newLine();
                }
      	      }
      				bw.close();
      				fw.close();
              
      			} catch (IOException e) {
      				e.printStackTrace();
      			}
      
    
          try{
      		  leituraTXTs.ler();
          }catch (Exception e) {
			      e.printStackTrace();
		      }
        
		}








	}

	public void menu(ArrayList<Contato> arrayContatos, BackupTXTs leituraTXTs) {

		Cores colorir = new Cores();

		Boolean continuar = true;
		int opcaoUsuario;

		while (continuar) {

			System.out.println("\n1) Importar Contato \n2) Voltar ao menu principal");
			System.out.print("-> ");
			opcaoUsuario = Integer.parseInt(entrada.nextLine());

			switch (opcaoUsuario) {
				case 1:
					importar(colorir, arrayContatos);
					break;
				case 2:
					continuar = false;
					titulo.tituloVoltar();
					break;
			}
		}
	}
}







MENU IMPORTAAAAA







import java.util.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.util.List;

public class MenuImporta {
	Scanner entrada = new Scanner(System.in);
	TituloSecoes titulo = new TituloSecoes();
	Cores colorir = new Cores();

	public void importar(Cores colorir, ArrayList<Contato> arrayContatos) {
		String usuarioDigitado = "";
		Contato contato = new Contato();
    DeletarArquivo deletarArquivo = new DeletarArquivo();
		List<String> linhas = new ArrayList<>();
		Prefixos prefixos = new Prefixos();
		String[] listaPrefixos = prefixos.getListaVazios();
    BackupTXTs leituraTXTs = new BackupTXTs();
		ArrayList<String> listaPrefixosUsados = new ArrayList<String>();
		ArrayList<String> valoresAFormatar = new ArrayList<String>();
		MenuBusca busca = new MenuBusca();
		
		String valorSite = "";
		Boolean casoEspecial = false;
		
		
		String prefixoSite = "uindsfuhjishnfujidsnfuidsnij";
		titulo.tituloPrincipal("Importacao Usuario");

		colorir.imprimirCiano("Digite o nome completo do usuario a ser importado: ");
		System.out.print("-> ");
		usuarioDigitado = entrada.nextLine();

		// FAZER VERIFICAÇÃO SE ESSE VCF JÁ EXISTE

		if(busca.buscaNomeCompleto(usuarioDigitado, arrayContatos, colorir)!=null){
			colorir.imprimirVermelho("Usuario ja esta cadastrado no sistema!");
		} else {
			// 1 - ler o amigo

			try {
				linhas = Files.readAllLines(new File(usuarioDigitado + ".vcf").toPath());
				linhas.remove(0);
				linhas.remove(0);
				linhas.remove(linhas.size() - 1);
			} catch (Exception e) {
	      colorir.imprimirVermelho("Arquivo não encontrado!");
			}
	
			// 2 - verificar se contem o prefixo dentro da array, se sim adiciona em lista,
			// se não adiciona risco (-)
	
	
			for (int i = 0; i < linhas.size(); i++) {
				String currentLinha = linhas.get(i);
				
				if(currentLinha.contains("X-SOCIALPROFILE;TYPE=")){
					String[] separacaoLinhaValores = {currentLinha.substring(0, currentLinha.indexOf(":")), currentLinha.substring(currentLinha.indexOf(":") + 1) };
					for(int k = 0; k < separacaoLinhaValores.length; k++) {
						System.out.println(separacaoLinhaValores[k]);
					}
					String[] separacaoLinhaType = separacaoLinhaValores[0].split("=");
					
					if(!separacaoLinhaType[1].equals("twitter") && !separacaoLinhaType[1].equals("linkedin") && !separacaoLinhaType[1].equals("instagram") && !separacaoLinhaType[1].equals("youtube")){
						valorSite = separacaoLinhaValores[1];
						prefixoSite = separacaoLinhaType[1];
						casoEspecial = true;
						// linhas.add(prefixoSite);
					}
				}
				
				String prefixoNovo = "X-SOCIALPROFILE;TYPE=" + prefixoSite + ":";
				
				for (int p = 0; p < listaPrefixos.length; p++) {
					String currentPrefixo = listaPrefixos[p];
					
					if(casoEspecial) {
						if(currentLinha.replace(";", "").contains(prefixoNovo.replace(";", ""))){
							listaPrefixosUsados.add(prefixoNovo);
							prefixoNovo = "uindsfuhjishnfujidsnfuidsnij";
							System.out.println("Colocou palavra");
						}
					} else {
						if (currentLinha.replace(";", "").contains(currentPrefixo.replace(";", ""))) {
							listaPrefixosUsados.add(listaPrefixos[p]);
							listaPrefixos[p] = "uindsfuhjishnfujidsnfuidsnii";
							System.out.println("Colocou palavra");
	          }
					} 
	      }
			}
	
			String[] novaListaPrefixosVazios = {"FN;CHARSET=UTF-8:", "N;CHARSET=UTF-8:;;;;", "GENDER:", "BDAY:", "EMAIL;CHARSET=UTF-8;type=HOME,INTERNET:", "TEL;TYPE=CELL:", "TEL;TYPE=HOME,VOICE:", "LABEL;CHARSET=UTF-8;TYPE=HOME:", "ADR;CHARSET=UTF-8;TYPE=WORK:;;", "ADR;CHARSET=UTF-8;TYPE=HOME:;;;;;;", "ORG;CHARSET=UTF-8:", "ROLE;CHARSET=UTF-8:", "URL;type=WORK;CHARSET=UTF-8:", "X-SOCIALPROFILE;TYPE=twitter:", "X-SOCIALPROFILE;TYPE=linkedin:", "X-SOCIALPROFILE;TYPE=instagram:", "X-SOCIALPROFILE;TYPE=youtube:", "X-SOCIALPROFILE;TYPE="+":" };
	
			
			// PROBLEMA
			for(int i = 0; i < novaListaPrefixosVazios.length; i ++) {
				int TemIndice=0;
				String naoTem2 = "";
				
				
				for(int l = 0; l < listaPrefixosUsados.size(); l++) {
					String currentPrefixo = novaListaPrefixosVazios[i].replace(";", "");
					String currentPrefixoUsado = listaPrefixosUsados.get(l).replace(";", "");
					String prefixoSiteNovo = novaListaPrefixosVazios[i].split(":")[0] + prefixoSite + ":";
					
					if(casoEspecial && prefixoSiteNovo.equals("X-SOCIALPROFILE;TYPE="+prefixoSite+":")){
						currentPrefixo = currentPrefixo.replace(":", prefixoSite) + ":";
					}
	
					if(currentPrefixoUsado.equals(currentPrefixo)) {
						System.out.println("teste: " + currentPrefixoUsado);
						TemIndice = i;
					}
					
				}
	
				if(TemIndice==i) {
					System.out.println(TemIndice);	
					
				} else {
					System.out.println("Nao tem: " + i);	
					listaPrefixosUsados.add(i, "-");
				}
			}
	
			System.out.println("------------------------");
			
			for (int i = 0; i < listaPrefixos.length; i++) {
	
				String currentPrefixo = listaPrefixosUsados.get(i).split(":")[0].replace(";", "");
				String currentLinha="";
				String currentValor="";
	
				if(currentPrefixo.equals("-")) {
					valoresAFormatar.add("-");
				} else {
					for(int j = 0; j < linhas.size(); j++){	
						currentLinha = linhas.get(j).split(":")[0].replace(";", "");
						currentValor = linhas.get(j).split(":")[1];

						if(currentLinha.equals(currentPrefixo)) {
		
							valoresAFormatar.add(currentValor);
							
						}
					}
				}
			}
	
			if(casoEspecial){
				valoresAFormatar.add(prefixoSite);
			} else {
				valoresAFormatar.add("-");
			}
	    
			for(int j = 0; j < valoresAFormatar.size(); j ++) {
				System.out.println("ValoresFinais: " + valoresAFormatar.get(j));
			}
			
	    Formatacoes formatacoes = new Formatacoes(valoresAFormatar);
	    formatacoes.setLista();
	    String[] dadosFormatados = formatacoes.getLista();
	
			formatacoes.imprimirListaValores();
		
	    for(int i = 0; i < dadosFormatados.length; i ++) {
				if(dadosFormatados[i].equals("-")) {
					dadosFormatados[i] = "";
				}
			}
	
	
			contato.setAll(dadosFormatados);

      deletarArquivo.deletarArquivo("Contatos.txt");
      			
			arrayContatos.add(contato);
			
			try {
				FileWriter fw = new FileWriter("Contatos.txt", true);
				BufferedWriter bw = new BufferedWriter(fw);
	
				bw.write("Inicio");
				bw.newLine();
				for (int i = 0; i < arrayContatos.size(); i++) {
					for (int j = 0; j < arrayContatos.get(0).getAll().length; j++) {
						if (arrayContatos.get(i).getAll()[j].equals("")) {
							bw.write("-");	
						} else {
							bw.write(arrayContatos.get(i).getAll()[j]);
						}
						bw.newLine();
					}
					bw.write("Inicio");
					if(i != arrayContatos.size() - 1){
						bw.newLine();
					}
				}
				bw.close();
				fw.close();
				
			} catch (IOException e) {
				colorir.imprimirVermelho("Erro na leitura do arquivo!");
			}


			try{
				leituraTXTs.ler();
			}catch (Exception e) {
				colorir.imprimirVermelho("Erro na leitura do arquivo!");
			}
	
		}
		
	}

	public void menu(ArrayList<Contato> arrayContatos, BackupTXTs leituraTXTs) {

		Cores colorir = new Cores();

		Boolean continuar = true;
		int opcaoUsuario;

		while (continuar) {

			System.out.println("\n1) Importar Contato \n2) Voltar ao menu principal");
			System.out.print("-> ");
			opcaoUsuario = Integer.parseInt(entrada.nextLine());

			switch (opcaoUsuario) {
				case 1:
					importar(colorir, arrayContatos);
					break;
				case 2:
					continuar = false;
					titulo.tituloVoltar();
					break;
			}
		}
	}
}